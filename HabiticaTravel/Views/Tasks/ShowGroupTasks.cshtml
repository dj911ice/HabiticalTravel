@model HabiticaTravel.Models.TravelGroupandUserTaskandItems

@{
    ViewBag.Title = $"Group Tasks for {Model.TravelGroupandUser.TravelGroup.TravelGroupName}";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 style="margin-top:50px; color: white">@ViewBag.Title</h2>

<button class="btn-success" id="reminderHandler">CheckReminders</button>
<div class="container-fluid text-center">
    @if (Model.ManyTaskAndItemsList.Count == 0)
    {
        <h1>Currently no group tasks</h1>
    }
    else
    {
        <div class="container-fluid">
            <div class="row tasks">
                @for (int i = 0; i < Model.ManyTaskAndItemsList.Count; i++)
                {

                    <h5 class="task-reminder">@Html.Raw(Json.Encode(Model.ManyTaskAndItemsList[i].CustomTask.ReminderTime))</h5>
                    <div class="col-xs-4">
                        <div class="task-item">
                            <h3>@Model.ManyTaskAndItemsList[i].CustomTask.TaskName</h3>
                            <h5>@Model.ManyTaskAndItemsList[i].CustomTask.TaskType</h5>
                            <p>@Model.ManyTaskAndItemsList[i].CustomTask.TaskNotes</p><br />
                        </div>
                        <div class="task-links">
                            <input type="hidden" value="@Model" name="model" />
                            
                            <a href="/Tasks/RemoveTask?TaskId=@Model.ManyTaskAndItemsList[i].CustomTask.TaskId">Remove Task</a>
                            <a href="/Tasks/EditCustomTask?TaskId=@Model.ManyTaskAndItemsList[i].CustomTask.TaskId">Edit Task</a>
                        </div>
                    </div>
                }
            </div>
        </div>

    }
</div>





@section Scripts
{
    <script src="~/Scripts/HabiticaJavaScript/DeleteTasksModal.js"></script>
    <script>
        $(function () {
            var msToTime = function (duration) {
                var milliseconds = parseInt((duration % 1000) / 100)
                    , seconds = parseInt((duration / 1000) % 60)
                    , minutes = parseInt((duration / (1000 * 60)) % 60)
                    , hours = parseInt((duration / (1000 * 60 * 60)) % 24);

                hours = (hours < 10) ? "0" + hours : hours;
                minutes = (minutes < 10) ? "0" + minutes : minutes;
                seconds = (seconds < 10) ? "0" + seconds : seconds;

                return `${hours}:${minutes}:${seconds}.${milliseconds}`;
            };

            $(".task-reminder").text((i, obj) => {
                var date = new Date(parseInt(obj.replace(/[^0-9 +]/g, ''))) - new Date();
                if (date > 172800000 || isNaN(date)) {
                    $(".task-reminder").filter(function (i) { return $(this).text() == obj }).remove();
                }
                else if (date <= 172800000 && date > 0) {
                    $(".task-reminder").filter(function (i) { return $(this).text() == obj }).text(`Time left for task: ${msToTime(date)}`)
                }
                else if (date < 0) {
                    $(".task-reminder").filter(function (i) { return $(this).text() == obj }).text('task time is up, sorry buddy, hell yeah....');
                }
            });
        });
    </script>
}



